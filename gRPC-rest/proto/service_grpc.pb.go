// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoviesApiClient is the client API for MoviesApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesApiClient interface {
	GetAllMovies(ctx context.Context, in *PageSearchRequest, opts ...grpc.CallOption) (*PageSearchResponse, error)
	GetMoviesById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*PageSearchResponse, error)
}

type moviesApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesApiClient(cc grpc.ClientConnInterface) MoviesApiClient {
	return &moviesApiClient{cc}
}

func (c *moviesApiClient) GetAllMovies(ctx context.Context, in *PageSearchRequest, opts ...grpc.CallOption) (*PageSearchResponse, error) {
	out := new(PageSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.MoviesApi/GetAllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesApiClient) GetMoviesById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*PageSearchResponse, error) {
	out := new(PageSearchResponse)
	err := c.cc.Invoke(ctx, "/proto.MoviesApi/GetMoviesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesApiServer is the server API for MoviesApi service.
// All implementations must embed UnimplementedMoviesApiServer
// for forward compatibility
type MoviesApiServer interface {
	GetAllMovies(context.Context, *PageSearchRequest) (*PageSearchResponse, error)
	GetMoviesById(context.Context, *IdRequest) (*PageSearchResponse, error)
	mustEmbedUnimplementedMoviesApiServer()
}

// UnimplementedMoviesApiServer must be embedded to have forward compatible implementations.
type UnimplementedMoviesApiServer struct {
}

func (UnimplementedMoviesApiServer) GetAllMovies(context.Context, *PageSearchRequest) (*PageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}
func (UnimplementedMoviesApiServer) GetMoviesById(context.Context, *IdRequest) (*PageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesById not implemented")
}
func (UnimplementedMoviesApiServer) mustEmbedUnimplementedMoviesApiServer() {}

// UnsafeMoviesApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesApiServer will
// result in compilation errors.
type UnsafeMoviesApiServer interface {
	mustEmbedUnimplementedMoviesApiServer()
}

func RegisterMoviesApiServer(s grpc.ServiceRegistrar, srv MoviesApiServer) {
	s.RegisterService(&MoviesApi_ServiceDesc, srv)
}

func _MoviesApi_GetAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesApiServer).GetAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MoviesApi/GetAllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesApiServer).GetAllMovies(ctx, req.(*PageSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesApi_GetMoviesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesApiServer).GetMoviesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MoviesApi/GetMoviesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesApiServer).GetMoviesById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviesApi_ServiceDesc is the grpc.ServiceDesc for MoviesApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviesApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MoviesApi",
	HandlerType: (*MoviesApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllMovies",
			Handler:    _MoviesApi_GetAllMovies_Handler,
		},
		{
			MethodName: "GetMoviesById",
			Handler:    _MoviesApi_GetMoviesById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
